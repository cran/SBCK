// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_pairwise_distances_XYstr
Rcpp::NumericMatrix cpp_pairwise_distances_XYstr(Rcpp::NumericMatrix X, Rcpp::NumericMatrix Y, std::string str_metric);
RcppExport SEXP _SBCK_cpp_pairwise_distances_XYstr(SEXP XSEXP, SEXP YSEXP, SEXP str_metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< std::string >::type str_metric(str_metricSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pairwise_distances_XYstr(X, Y, str_metric));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pairwise_distances_Xstr
Rcpp::NumericMatrix cpp_pairwise_distances_Xstr(Rcpp::NumericMatrix X, std::string str_metric);
RcppExport SEXP _SBCK_cpp_pairwise_distances_Xstr(SEXP XSEXP, SEXP str_metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type str_metric(str_metricSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pairwise_distances_Xstr(X, str_metric));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pairwise_distances_XYCall
Rcpp::NumericMatrix cpp_pairwise_distances_XYCall(Rcpp::NumericMatrix X, Rcpp::NumericMatrix Y, Rcpp::Function metric);
RcppExport SEXP _SBCK_cpp_pairwise_distances_XYCall(SEXP XSEXP, SEXP YSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pairwise_distances_XYCall(X, Y, metric));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pairwise_distances_XCall
Rcpp::NumericMatrix cpp_pairwise_distances_XCall(Rcpp::NumericMatrix X, Rcpp::Function metric);
RcppExport SEXP _SBCK_cpp_pairwise_distances_XCall(SEXP XSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pairwise_distances_XCall(X, metric));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_SBCK_cpp();

static const R_CallMethodDef CallEntries[] = {
    {"_SBCK_cpp_pairwise_distances_XYstr", (DL_FUNC) &_SBCK_cpp_pairwise_distances_XYstr, 3},
    {"_SBCK_cpp_pairwise_distances_Xstr", (DL_FUNC) &_SBCK_cpp_pairwise_distances_Xstr, 2},
    {"_SBCK_cpp_pairwise_distances_XYCall", (DL_FUNC) &_SBCK_cpp_pairwise_distances_XYCall, 3},
    {"_SBCK_cpp_pairwise_distances_XCall", (DL_FUNC) &_SBCK_cpp_pairwise_distances_XCall, 2},
    {"_rcpp_module_boot_SBCK_cpp", (DL_FUNC) &_rcpp_module_boot_SBCK_cpp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SBCK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
